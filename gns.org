
* General

  Get devices port and name.

  #+BEGIN_SRC python :results output
    import requests
    from pprint import pprint as pp
    req = requests.get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes')
    for i in req.json():
        print(i['name'], i['console'])
  #+END_SRC

  #+RESULTS:
  #+begin_example
  VLAN30(DHCP) 5018
  SW2 None
  VLAN50(DHCP) 5014
  VLAN60 5016
  pfSense2.3.3-1 5023
  VLAN10(DHCP) 5010
  CiscoCSR1000v1.1-1 5900
  Internet(NAT) None
  VLAN40 5020
  CiscoASAv-1 5901
  Firefox-1 5902
  MikrotikCHR-1 5015
  VLAN20 5019
  SW1 None
  SW3 None
#+end_example

* Cisco ASA
** Read config
   
   
   #+BEGIN_SRC python :results output :session example
     # This script will read the configuration on the Cisco ASA

     from telnetlib import Telnet
     from requests import get
     from time import sleep

     for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
         if i['name'] == 'CiscoASAv-1':
             with Telnet('192.168.117.21', i['console'], timeout=12) as tn:
                 tn.write('terminal pager 0'.encode('ascii')+b'\n')
                 tn.write('show run'.encode('ascii')+b'\n')
                 data = ''
                 sum = b''
                 while data.find(': end') == -1:
                     tmp = tn.read_eager()
                     data = tmp.decode('ascii')
                     sum += tmp
                 print(sum.decode('utf8'))
   #+END_SRC

   #+RESULTS:
   #+begin_example
   Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32
   Type "help", "copyright", "credits" or "license" for more information.
   ... >>> >>> >>> python.el: native completion setup failed
   >>> >>> ... ... ... ... ... ... ... ... ... ... ... ... terminal pager 0

   
ciscoasa# show run

   : Saved

   

   : 

   : Serial Number: 9ABB6RRMN1L

   : Hardware:   ASAv, 2048 MB RAM, CPU Pentium II 2000 MHz

   :

   ASA Version 9.5(2)207 

   !

   hostname ciscoasa

   enable password 8Ry2YjIyt7RRXU24 encrypted

   xlate per-session deny tcp any4 any4

   xlate per-session deny tcp any4 any6

   xlate per-session deny tcp any6 any4

   xlate per-session deny tcp any6 any6

   xlate per-session deny udp any4 any4 eq domain

   xlate per-session deny udp any4 any6 eq domain

   xlate per-session deny udp any6 any4 eq domain

   xlate per-session deny udp any6 any6 eq domain

   names

   !

   interface GigabitEthernet0/0

    nameif INTERNAL

    security-level 100

    ip address 10.0.4.41 255.255.255.248 

   !

   interface GigabitEthernet0/1

    nameif EXTERNAL

    security-level 100

    ip address dhcp setroute 

   !

   interface GigabitEthernet0/2

    shutdown

    no nameif

    no security-level

    no ip address

   !

   interface GigabitEthernet0/3

    shutdown

    no nameif

    no security-level

    no ip address

   !

   interface GigabitEthernet0/4

    shutdown

    no nameif

    no security-level

    no ip address

   !

   interface GigabitEthernet0/5

    shutdown

    no nameif

    no security-level

    no ip address

   !

   interface GigabitEthernet0/6

    shutdown

    no nameif

    no security-level

    no ip address

   !

   interface Management0/0

    shutdown

    no nameif

    no security-level

    no ip address

   !

   ftp mode passive

   same-security-traffic permit inter-interface

   object network internal-external-nat

    subnet 10.0.4.40 255.255.255.248

   object network internal-nat

    subnet 10.0.0.0 255.0.0.0

   object network external-nat

    subnet 0.0.0.0 0.0.0.0

   pager lines 23

   mtu INTERNAL 1500

   mtu EXTERNAL 1500

   no failover

   no monitor-interface service-module 

   icmp unreachable rate-limit 1 burst-size 1

   no asdm history enable

   arp timeout 14400

   no arp permit-nonconnected

   !

   object network internal-external-nat

    nat (INTERNAL,EXTERNAL) dynamic interface

   object network internal-nat

    nat (INTERNAL,EXTERNAL) dynamic interface

   object network external-nat

    nat (INTERNAL,EXTERNAL) dynamic interface

   router ospf 10

    network 10.0.0.0 255.255.255.0 area 0

    network 10.0.4.40 255.255.255.248 area 0

    network 10.0.4.0 255.255.255.0 area 0

    network 10.0.0.0 255.0.0.0 area 0

    network 0.0.0.0 0.0.0.0 area 0

    log-adj-changes

    default-information originate always

   !

   timeout xlate 3:00:00

   timeout pat-xlate 0:00:30

   timeout conn 1:00:00 half-closed 0:10:00 udp 0:02:00 sctp 0:02:00 icmp 0:00:02

   timeout sunrpc 0:10:00 h323 0:05:00 h225 1:00:00 mgcp 0:05:00 mgcp-pat 0:05:00

   timeout sip 0:30:00 sip_media 0:02:00 sip-invite 0:03:00 sip-disconnect 0:02:00

   timeout sip-provisional-media 0:02:00 uauth 0:05:00 absolute

   timeout tcp-proxy-reassembly 0:01:00

   timeout floating-conn 0:00:00

   user-identity default-domain LOCAL

   aaa authentication ssh console LOCAL 

   no snmp-server location

   no snmp-server contact

   crypto ipsec security-association pmtu-aging infinite

   crypto ca trustpoint _SmartCallHome_ServerCA

    no validation-usage

    crl configure

   crypto ca trustpool policy

    auto-import

   crypto ca certificate chain _SmartCallHome_ServerCA

    certificate ca 18dad19e267de8bb4a2158cdcc6b3b4a

       308204d3 308203bb a0030201 02021018 dad19e26 7de8bb4a 2158cdcc 6b3b4a30 

       0d06092a 864886f7 0d010105 05003081 ca310b30 09060355 04061302 55533117 

       30150603 55040a13 0e566572 69536967 6e2c2049 6e632e31 1f301d06 0355040b 

       13165665 72695369 676e2054 72757374 204e6574 776f726b 313a3038 06035504 

       0b133128 63292032 30303620 56657269 5369676e 2c20496e 632e202d 20466f72 

       20617574 686f7269 7a656420 75736520 6f6e6c79 31453043 06035504 03133c56 

       65726953 69676e20 436c6173 73203320 5075626c 69632050 72696d61 72792043 

       65727469 66696361 74696f6e 20417574 686f7269 7479202d 20473530 1e170d30 

       36313130 38303030 3030305a 170d3336 30373136 32333539 35395a30 81ca310b 

       30090603 55040613 02555331 17301506 0355040a 130e5665 72695369 676e2c20 

       496e632e 311f301d 06035504 0b131656 65726953 69676e20 54727573 74204e65 

       74776f72 6b313a30 38060355 040b1331 28632920 32303036 20566572 69536967 

       6e2c2049 6e632e20 2d20466f 72206175 74686f72 697a6564 20757365 206f6e6c 

       79314530 43060355 0403133c 56657269 5369676e 20436c61 73732033 20507562 

       6c696320 5072696d 61727920 43657274 69666963 6174696f 6e204175 74686f72 

       69747920 2d204735 30820122 300d0609 2a864886 f70d0101 01050003 82010f00 

       3082010a 02820101 00af2408 08297a35 9e600caa e74b3b4e dc7cbc3c 451cbb2b 

       e0fe2902 f95708a3 64851527 f5f1adc8 31895d22 e82aaaa6 42b38ff8 b955b7b1 

       b74bb3fe 8f7e0757 ecef43db 66621561 cf600da4 d8def8e0 c362083d 5413eb49 

       ca595485 26e52b8f 1b9febf5 a191c233 49d84363 6a524bd2 8fe87051 4dd18969 

       7bc770f6 b3dc1274 db7b5d4b 56d396bf 1577a1b0 f4a225f2 af1c9267 18e5f406 

       04ef90b9 e400e4dd 3ab519ff 02baf43c eee08beb 378becf4 d7acf2f6 f03dafdd 

       75913319 1d1c40cb 74241921 93d914fe ac2a52c7 8fd50449 e48d6347 883c6983 

       cbfe47bd 2b7e4fc5 95ae0e9d d4d143c0 6773e314 087ee53f 9f73b833 0acf5d3f 

       3487968a ee53e825 15020301 0001a381 b23081af 300f0603 551d1301 01ff0405 

       30030101 ff300e06 03551d0f 0101ff04 04030201 06306d06 082b0601 05050701 

       0c046130 5fa15da0 5b305930 57305516 09696d61 67652f67 69663021 301f3007 

       06052b0e 03021a04 148fe5d3 1a86ac8d 8e6bc3cf 806ad448 182c7b19 2e302516 

       23687474 703a2f2f 6c6f676f 2e766572 69736967 6e2e636f 6d2f7673 6c6f676f 

       2e676966 301d0603 551d0e04 1604147f d365a7c2 ddecbbf0 3009f343 39fa02af 

       33313330 0d06092a 864886f7 0d010105 05000382 01010093 244a305f 62cfd81a 

       982f3dea dc992dbd 77f6a579 2238ecc4 a7a07812 ad620e45 7064c5e7 97662d98 

       097e5faf d6cc2865 f201aa08 1a47def9 f97c925a 0869200d d93e6d6e 3c0d6ed8 

       e6069140 18b9f8c1 eddfdb41 aae09620 c9cd6415 3881c994 eea28429 0b136f8e 

       db0cdd25 02dba48b 1944d241 7a05694a 584f60ca 7e826a0b 02aa2517 39b5db7f 

       e784652a 958abd86 de5e8116 832d10cc defda882 2a6d281f 0d0bc4e5 e71a2619 

       e1f4116f 10b595fc e7420532 dbce9d51 5e28b69e 85d35bef a57d4540 728eb70e 

       6b0e06fb 33354871 b89d278b c4655f0d 86769c44 7af6955c f65d3208 33a454b6 

       183f685c f2424a85 3854835f d1e82cf2 ac11d6a8 ed636a

     quit

   telnet timeout 5

   ssh stricthostkeycheck

   ssh 0.0.0.0 0.0.0.0 INTERNAL

   ssh timeout 5

   ssh version 2

   ssh key-exchange group dh-group1-sha1

   console timeout 0

   threat-detection basic-threat

   threat-detection statistics access-list

   no threat-detection statistics tcp-intercept

   dynamic-access-policy-record DfltAccessPolicy

   username root password 8CnBttgsrVX7rR2R encrypted

   !

   class-map inspection_default

    match default-inspection-traffic

   !

   !

   policy-map global-policy

    class inspection_default

     inspect icmp 

   policy-map type inspect dns migrated_dns_map_1

    parameters

     message-length maximum client auto

     message-length maximum 512

   policy-map global_policy

    class inspection_default

     inspect dns migrated_dns_map_1 

     inspect ftp 

     inspect h323 h225 

     inspect h323 ras 

     inspect ip-options 

     inspect netbios 

     inspect rsh 

     inspect rtsp 

     inspect skinny  

     inspect esmtp 

     inspect sqlnet 

     inspect sunrpc 

     inspect tftp 

     inspect sip  

     inspect xdmcp 

     inspect icmp 

   !

   service-policy global_policy global

   prompt hostname context 

   no call-home reporting anonymous

   call-home

    profile CiscoTAC-1

     no active

     destination address http https://tools.cisco.com/its/service/oddce/services/DDCEService

     destination address email callhome@cisco.com

     destination transport-method http

     subscribe-to-alert-group diagnostic

     subscribe-to-alert-group environment

     subscribe-to-alert-group inventory periodic monthly

     subscribe-to-alert-group configuration periodic monthly

     subscribe-to-alert-group telemetry periodic daily

    profile License

     destination address http https://tools.cisco.com/its/service/oddce/services/DDCEService

     destination transport-method http

   Cryptochecksum:3e84adb7d74b42241535309b035e21a8

   : end

   
ciscoasa#
#+end_example

** Write config

   This is the base configuration for the assignment 3.
   
   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-asa
   | Command                                      | Description |
   |----------------------------------------------+-------------|
   |                                              |             | 
   | conf t                                       |             |  
   |                                              |             |
   | interface GigabitEthernet0/0                 |             |
   | nameif INTERNAL                              |             |
   | security-level 100                           |             |
   | ip address 10.0.4.41 255.255.255.248         |             |
   | exit                                         |             |
   |                                              |             |
   | interface GigabitEthernet0/1                 |             |
   | nameif EXTERNAL                              |             |
   | security-level 100                           |             |
   | ip address dhcp setroute                     |             |
   | exit                                         |             |
   |                                              |             |
   | same-security-traffic permit inter-interface |             |
   |                                              |             |
   | object network internal-external-nat         |             |
   | subnet 10.0.4.40 255.255.255.248             |             |
   | exit                                         |             |
   |                                              |             |
   | object network internal-nat                  |             |
   | subnet 10.0.0.0 255.0.0.0                    |             |
   | exit                                         |             |
   |                                              |             |
   | object network external-nat                  |             |
   | subnet 0.0.0.0 0.0.0.0                       |             |
   | exit                                         |             |
   |                                              |             |
   | mtu INTERNAL 1500                            |             |
   | mtu EXTERNAL 1500                            |             |
   |                                              |             |
   | object network internal-external-nat         |             |
   | nat (INTERNAL,EXTERNAL) dynamic interface    |             |
   | exit                                         |             |
   |                                              |             |
   | object network internal-nat                  |             |
   | nat (INTERNAL,EXTERNAL) dynamic interface    |             |
   | exit                                         |             |
   |                                              |             |
   | object network external-nat                  |             |
   | nat (INTERNAL,EXTERNAL) dynamic interface    |             |
   | exit                                         |             |
   |                                              |             |
   | router ospf 10                               |             |
   | network 10.0.0.0 255.255.255.0 area 0        |             |
   | network 10.0.4.40 255.255.255.248 area 0     |             |
   | network 10.0.4.0 255.255.255.0 area 0        |             |
   | network 10.0.0.0 255.0.0.0 area 0            |             |
   | network 0.0.0.0 0.0.0.0 area 0               |             |
   | log-adj-changes                              |             |
   | default-information originate always         |             |
   | exit                                         |             |
   |                                              |             |
   | class-map inspection_default                 |             |
   | match default-inspection-traffic             |             |
   | exit                                         |             |
   |                                              |             |
   | policy-map global_policy                     |             |
   | class inspection_default                     |             |
   | inspect icmp                                 |             |
   | inspect dns migrated_dns_map_1               |             |
   | inspect ftp                                  |             |
   | inspect h323 h225                            |             |
   | inspect h323 ras                             |             |
   | inspect ip-options                           |             |
   | inspect netbios                              |             |
   | inspect rsh                                  |             |
   | inspect rtsp                                 |             |
   | inspect skinny                               |             |
   | inspect esmtp                                |             |
   | inspect sqlnet                               |             |
   | inspect sunrpc                               |             |
   | inspect tftp                                 |             |
   | inspect sip                                  |             |
   | inspect xdmcp                                |             |
   | exit                                         |             |
   | exit                                         |             |
   |                                              |             |
   | service-policy global_policy global          |             |
   |                                              |             |

  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-asa[1:*,0]
     from telnetlib import Telnet
     from requests import get
     from time import sleep
     for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
         if i['name'] == 'CiscoASAv-1':
             with Telnet('192.168.117.21', i['console']) as tn:
                 for j in CMDS:
                     s = j.encode('ascii')+b'\n'
                     print(s)
                     tn.write(s)
                     sleep(0.5)
   #+END_SRC

** DONE SSH

   Configure SSH to be allowed from remote location within the local network.

   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-asa-ssh
   | Command                                          | Description |
   |--------------------------------------------------+-------------|
   |                                                  |             |
   | conf t                                           |             |
   | username root password Pass123                   |             |
   | crypto key generate rsa general-key modulus 2048 |             |
   | yes                                              |             |
   | username root password Pass123                   |             |
   | ssh 0.0.0.0 0.0.0.0 INTERNAL                     |             |
   | aaa authentication ssh console LOCAL             |             |
   | ssh version 2                                    |             |
   | exit                                             |             |
   |                                                  |             |

  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-asa-ssh[1:*,0]
          from telnetlib import Telnet
          from requests import get
          from time import sleep
          for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
              if i['name'] == 'CiscoASAv-1':
                  with Telnet('192.168.117.21', i['console']) as tn:
                      for j in CMDS:
                          s = j.encode('ascii')+b'\n'
                          print(s)
                          tn.write(s)
                          sleep(0.5)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   b'\n'
   b'conf t\n'
   b'username root password Pass123\n'
   b'crypto key generate rsa general-key modulus 2048\n'
   b'yes\n'
   b'username root password Pass123\n'
   b'ssh 0.0.0.0 0.0.0.0 INTERNAL\n'
   b'aaa authentication ssh console LOCAL\n'
   b'ssh version 2\n'
   b'exit\n'
   b'\n'
#+end_example

** DONE Web interface

   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-asa-web-interface
   | Command                       | Description |
   |-------------------------------+-------------|
   |                               |             |
   | conf t                        |             |
   | http server enable            |             |
   | http 0.0.0.0 0.0.0.0 INTERNAL |             |
   |                               |             |

  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-asa-web-interface[1:*,0]
          from telnetlib import Telnet
          from requests import get
          from time import sleep
          for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
              if i['name'] == 'CiscoASAv-1':
                  with Telnet('192.168.117.21', i['console']) as tn:
                      for j in CMDS:
                          s = j.encode('ascii')+b'\n'
                          print(s)
                          tn.write(s)
                          sleep(0.5)
   #+END_SRC

   #+RESULTS:
   : b'\n'
   : b'conf t\n'
   : b'http server enable\n'
   : b'http 0.0.0.0 0.0.0.0 INTERNAL\n'
   : b'\n'

* Cisco CSR Router
** Read config

   the router needs to be in "enable" mode.

   #+BEGIN_SRC python :results output 
     # This script will read the configuration on the Cisco CSR

     from telnetlib import Telnet
     from requests import get
     from time import sleep

     for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
         if i['name'] == 'CiscoCSR1000v1.1-1':
             with Telnet('192.168.117.21', i['console'], timeout=12) as tn:
                 tn.write('terminal length 0'.encode('ascii')+b'\n')
                 tn.write('show run'.encode('ascii')+b'\n')
                 data = ''
                 sum = b''
                 while data.find('\nend') == -1:
                     tmp = tn.read_eager()
                     data = tmp.decode('ascii')
                     sum += tmp
                 print(sum.decode('ascii'))
   #+END_SRC

   #+RESULTS:
   #+begin_example
   terminal length 0

   Router#show run

   Building configuration...

   

   Current configuration : 1581 bytes

   !

   ! Last configuration change at 11:03:47 UTC Tue May 23 2017

   !

   version 15.5

   service timestamps debug datetime msec

   service timestamps log datetime msec

   no platform punt-keepalive disable-kernel-core

   platform console serial

   !

   hostname Router

   !

   boot-start-marker

   boot-end-marker

   !

   !

   !

   no aaa new-model

   !

   !

   !

   !

   !

   !

   !

   !

   !

   

   

   

   !

   ip dhcp pool vlan30

    network 10.0.2.0 255.255.255.0

    default-router 10.0.2.1 

    dns-server 8.8.8.8 

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   subscriber templating

   !

   multilink bundle-name authenticated

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   license udi pid CSR1000V sn 9JRJL7B100Y

   spanning-tree extend system-id

   !

   !

   redundancy

   !

   !

   !

   !

   !

   !

   ! 

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   !

   ! 

   ! 

   !

   !

   interface GigabitEthernet1

    ip address 10.0.4.26 255.255.255.248

    negotiation auto

   !

   interface GigabitEthernet2

    ip address 10.0.4.34 255.255.255.248

    negotiation auto

   !

   interface GigabitEthernet3

    no ip address

    ip access-group 101 in

    negotiation auto

   !

   interface GigabitEthernet3.30

    encapsulation dot1Q 30

    ip address 10.0.2.1 255.255.255.0

    ip access-group 130 in

   !

   interface GigabitEthernet3.40

    encapsulation dot1Q 40

    ip address 10.0.0.1 255.255.254.0

   !

   interface GigabitEthernet4

    no ip address

    shutdown

    negotiation auto

   !

   router ospf 10

    network 10.0.0.0 0.0.0.255 area 0

    network 10.0.0.0 0.0.1.255 area 0

    network 10.0.2.0 0.0.0.255 area 0

    network 10.0.4.24 0.0.0.7 area 0

    network 10.0.4.32 0.0.0.7 area 0

    network 10.0.4.0 0.0.0.255 area 0

   !

   !

   !

   ip forward-protocol nd

   !

   no ip http server

   no ip http secure-server

   !

   !

   !

   !

   control-plane

   !

    !

    !

    !

    !

   !

   !

   !

   !

   !

   line con 0

   line vty 0 4

    login

   !

   !

   end

   

   Router#
   #+end_example

** Write config

   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-csr
   | Command                                  | Description |
   |------------------------------------------+-------------|
   |                                          |             |
   | conf t                                   |             |
   |                                          |             |
   | interface GigabitEthernet1               |             |
   | ip address 10.0.4.26 255.255.255.248     |             |
   | no shut                                  |             |
   | exit                                     |             |
   |                                          |             |
   | interface GigabitEthernet2               |             |
   | ip address 10.0.4.34 255.255.255.248     |             |
   | no shut                                  |             |
   | exit                                     |             |
   |                                          |             |
   | interface GigabitEthernet3               |             |
   | no shut                                  |             |
   | no ip address                            |             |
   | ip access-group 101 in                   |             |
   | negotiation auto                         |             |
   | exit                                     |             |
   |                                          |             |
   | interface GigabitEthernet3.30            |             |
   | encapsulation dot1Q 30                   |             |
   | ip address 10.0.2.1 255.255.255.0        |             |
   | ip access-group 130 in                   |             |
   | exit                                     |             |
   |                                          |             |
   | interface GigabitEthernet3.40            |             |
   | encapsulation dot1Q 40                   |             |
   | ip address 10.0.0.1 255.255.254.0        |             |
   | exit                                     |             |
   |                                          |             |
   | ip dhcp pool vlan30                      |             |
   | network 10.0.2.0 255.255.255.0           |             |
   | default-router 10.0.2.1                  |             |
   | dns-server 8.8.8.8                       |             |
   | exit                                     |             |
   |                                          |             |
   | router ospf 10                           |             |
   | network 10.0.0.0 0.0.0.255 area 0        | VLAN40      |
   | network 10.0.2.0 0.0.0.255 area 0        | VLAN30      |
   | network 10.0.4.24 0.0.0.255 area 0       | BACK2       |
   | network 10.0.4.32 0.0.0.255 area 0       | BACK3       |
   |                                          |             |
   | network 10.0.0.0 255.255.254.0 area 0    | VLAN40      |
   | network 10.0.2.0 255.255.255.0 area 0    | VLAN30      |
   | network 10.0.4.24 255.255.255.248 area 0 | BACK2       |
   | network 10.0.4.32 255.255.255.248 area 0 | BACK3       |
   | exit                                     |             |
   | platform console serial                  |             |
   | exit                                     |             |
  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-csr[1:*,0]
          from telnetlib import Telnet
          from requests import get
          from time import sleep
          for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
              if i['name'] == 'CiscoCSR1000v1.1-1':
                  with Telnet('192.168.117.21', i['console']) as tn:
                      for j in CMDS:
                          s = j.encode('ascii')+b'\n'
                          print(s)
                          tn.write(s)
                          sleep(0.5)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   b'\n'
   b'conf t\n'
   b'\n'
   b'interface GigabitEthernet1\n'
   b'ip address 10.0.4.26 255.255.255.248\n'
   b'no shut\n'
   b'exit\n'
   b'\n'
   b'interface GigabitEthernet2\n'
   b'ip address 10.0.4.34 255.255.255.248\n'
   b'no shut\n'
   b'exit\n'
   b'\n'
   b'interface GigabitEthernet3\n'
   b'no shut\n'
   b'no ip address\n'
   b'ip access-group 101 in\n'
   b'negotiation auto\n'
   b'exit\n'
   b'\n'
   b'interface GigabitEthernet3.30\n'
   b'encapsulation dot1Q 30\n'
   b'ip address 10.0.2.1 255.255.255.0\n'
   b'ip access-group 130 in\n'
   b'exit\n'
   b'\n'
   b'interface GigabitEthernet3.40\n'
   b'encapsulation dot1Q 40\n'
   b'ip address 10.0.0.1 255.255.254.0\n'
   b'exit\n'
   b'\n'
   b'ip dhcp pool vlan30\n'
   b'network 10.0.2.0 255.255.255.0\n'
   b'default-router 10.0.2.1\n'
   b'dns-server 8.8.8.8\n'
   b'exit\n'
   b'\n'
   b'router ospf 10\n'
   b'network 10.0.0.0 0.0.0.255 area 0\n'
   b'network 10.0.2.0 0.0.0.255 area 0\n'
   b'network 10.0.4.24 0.0.0.255 area 0\n'
   b'network 10.0.4.32 0.0.0.255 area 0\n'
   b'\n'
   b'network 10.0.0.0 255.255.254.0 area 0\n'
   b'network 10.0.2.0 255.255.255.0 area 0\n'
   b'network 10.0.4.24 255.255.255.248 area 0\n'
   b'network 10.0.4.32 255.255.255.248 area 0\n'
   b'exit\n'
   b'platform console serial\n'
   b'exit\n'
#+end_example

** DONE TELNET

   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-csr-telnet
   | Command                 | Description |
   |-------------------------+-------------|
   |                         |             |
   | conf t                  |             |
   | line vty 0 15           |             |
   | password Pass123        |             |
   | exec-timeout 40 0       |             |
   | logging synchronous     |             |
   | transport input telnet  |             |
   | login                   |             |
   | exit                    |             |
   | enable password Pass123 |             |
   | exit                    |             |
   |                         |             |
  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-csr-telnet[1:*,0]
          from telnetlib import Telnet
          from requests import get
          from time import sleep
          for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
              if i['name'] == 'CiscoCSR1000v1.1-1':
                  with Telnet('192.168.117.21', i['console']) as tn:
                      for j in CMDS:
                          s = j.encode('ascii')+b'\n'
                          print(s)
                          tn.write(s)
                          sleep(0.5)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   b'\n'
   b'conf t\n'
   b'line vty 0 15\n'
   b'password Pass123\n'
   b'exec-timeout 40 0\n'
   b'logging synchronous\n'
   b'transport input telnet\n'
   b'login\n'
   b'exit\n'
   b'enable password Pass123\n'
   b'exit\n'
   b'\n'
#+end_example
   
** DONE Web interface

   The device needs to be in "enable" mode.

   #+NAME: configure-cisco-csr-web-interface
   | Command                                | Description |
   |----------------------------------------+-------------|
   |                                        |             |
   | conf t                                 |             |
   | ip http server                         |             |
   | ip http authentication local           |             |
   | ip access-list standard 20             |             |
   | permit 0.0.0.0 0.0.0.0                 |             |
   | permit 10.0.0.0 0.255.255.255          |             |
   | exit                                   |             |
   | ip http access-class 20                |             |
   | username root priv 15 password Pass123 |             |
   | ip http authentication local           |             |
   | exit                                   |             |
   |                                        |             |
  
   #+BEGIN_SRC python :results output :var CMDS=configure-cisco-csr-web-interface[1:*,0]
     from telnetlib import Telnet
     from requests import get
     from time import sleep
     for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
         if i['name'] == 'CiscoCSR1000v1.1-1':
             with Telnet('192.168.117.21', i['console']) as tn:
                 for j in CMDS:
                     s = j.encode('ascii')+b'\n'
                     print(s)
                     tn.write(s)
                     sleep(0.5)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   b'\n'
   b'conf t\n'
   b'ip http server\n'
   b'ip http authentication local\n'
   b'ip access-list standard 20\n'
   b'permit 0.0.0.0 0.0.0.0\n'
   b'permit 10.0.0.0 0.255.255.255\n'
   b'exit\n'
   b'ip http access-class 20\n'
   b'username root priv 15 password Pass123\n'
   b'ip http authentication local\n'
   b'aaa authentication login default local\n'
   b'exit\n'
   b'\n'
#+end_example

* VLAN10(DHCP)


   #+NAME: configure-vlan-10-client
   | Command           | Description |
   |-------------------+-------------|
   | ip dhcp -r        |             |
   | ping 8.8.8.8 -c 2 |             |
  
   #+BEGIN_SRC python :results output :var CMDS=configure-vlan-10-client[1:*,0]
     from telnetlib import Telnet
     from requests import get
     from time import sleep
     for i in get('http://192.168.117.21:3080/v2/projects/acd6db6a-6f95-44ab-bfe7-2aed420c296c/nodes').json():
         if i['name'] == 'VLAN10(DHCP)':
             with Telnet('192.168.117.21', i['console'], timeout=15) as tn:
                 for j in CMDS:
                     s = j.encode('ascii')+b'\n'
                     print(s)
                     tn.write(s)
                     sleep(5)
                 print(tn.read_eager().decode('ascii'))
   #+END_SRC

* VLAN30(DHCP)
* VLAN50(DHCP)
